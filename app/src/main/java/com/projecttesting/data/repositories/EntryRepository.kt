package com.projecttesting.data.repositories

import com.projecttesting.data.daos.EntriesDao
import com.projecttesting.data.models.Entry
import com.projecttesting.data.models.TopEntriesResponse
import com.projecttesting.data.services.EntriesService
import com.projecttesting.data.sources.EntriesSource
import com.projecttesting.network.NetworkHandler
import com.projecttesting.network.RequestCallback
import timber.log.Timber
import javax.inject.Inject
import javax.inject.Singleton


/**
 * singleton is maintained by Dagger
 *
 * @Inject tells Dagger that this class can be injected
 * Dagger automatically calls this constructor, if an instance of this class is requested.
 *
 * @param entriesService  remote data source; generated by retrofit
 *
 */
@Singleton
class EntryRepository @Inject constructor(
    private val entriesService: EntriesService,
    private val entriesDao: EntriesDao
) : EntriesSource {

    override suspend fun getTopEntries(): TopEntriesResponse? {

        return loadTopEntriesFromRemoteDataSource()

    }

    private fun loadRiderFromLocalDataSource(riderId: Int): Entry? {
        return entriesDao.getRiderById(riderId)
    }

    private suspend fun loadTopEntriesFromRemoteDataSource(): TopEntriesResponse? {

        var rider: TopEntriesResponse? = null

        NetworkHandler.request(entriesService.getTopEntries(), object : RequestCallback<TopEntriesResponse> {

            override fun onError(message: String?) {
                Timber.e(message)
            }

            override fun onSuccess(data: TopEntriesResponse?) {
                data?.let {
                    rider = data
                    //entriesDao.insertEntry(data)
                }
            }

            override fun onLoading() {
                // TODO: handle loading state
            }
        })

        return rider

    }

    suspend fun updateRider(rider: Entry) {
        /*NetworkHandler.request(entriesService.updateRider(topEntries.id!!, topEntries), object : RequestCallback<Entry> {

            override fun onError(message: String?) {
                // TODO: handle error state
            }

            override fun onSuccess(data: Entry?) {
                data?.let {
                    entriesDao.updateRider(data)
                }
            }

            override fun onLoading() {
                // TODO: handle loading state
            }
        })*/
    }

}